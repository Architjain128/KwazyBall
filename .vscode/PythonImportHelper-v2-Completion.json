[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "levelsetup",
        "description": "levelsetup",
        "isExtraImport": true,
        "detail": "levelsetup",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "levelsetup",
        "description": "levelsetup",
        "isExtraImport": true,
        "detail": "levelsetup",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "RESET",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "SPEED",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "colorama",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "colorama",
        "description": "colorama",
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Back",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "powerup",
        "description": "powerup",
        "isExtraImport": true,
        "detail": "powerup",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "powerup",
        "description": "powerup",
        "isExtraImport": true,
        "detail": "powerup",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "gameover",
        "importPath": "messages",
        "description": "messages",
        "isExtraImport": true,
        "detail": "messages",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "messages",
        "description": "messages",
        "isExtraImport": true,
        "detail": "messages",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "getch",
        "description": "getch",
        "isExtraImport": true,
        "detail": "getch",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "background",
        "description": "background",
        "isExtraImport": true,
        "detail": "background",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "paddle",
        "description": "paddle",
        "isExtraImport": true,
        "detail": "paddle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "scoreoard",
        "description": "scoreoard",
        "isExtraImport": true,
        "detail": "scoreoard",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ball",
        "description": "ball",
        "isExtraImport": true,
        "detail": "ball",
        "documentation": {}
    },
    {
        "label": "termios",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "termios",
        "description": "termios",
        "detail": "termios",
        "documentation": {}
    },
    {
        "label": "tty",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tty",
        "description": "tty",
        "detail": "tty",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "Scene",
        "kind": 6,
        "importPath": "background",
        "description": "background",
        "peekOfCode": "class Scene:\n    def __init__(self,speed):\n        self.speed = speed\n        self.matrix = []\n        self.power_matrix = []\n        self.powers = []\n        # arr|', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '|'], [' ', ' ', ' ', ' ', '|', ' ', 'P', 'r', 'e', 's', 's', ' ', '[', 'P', ']', ' ', 'o', 'r', ' ', '[', 'p', ']', ' ', 't', 'o', ' ', 'p', 'a', 'u', 's', 'e', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'T', 'i', 'm', 'e', ' ', ':', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'P', 'r', 'e', 's', 's', ' ', '[', 'Q', ']', ' ', 'o', 'r', ' ', '[', 'q', ']', ' ', 't', 'o', ' ', 'q', 'u', 'i', 't', ' ', '|'], [' ', ' ', ' ', ' ', '||'], [' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', 'L', 'i', 'v', 'e', 's', ' ', ':', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'L', 'e', 'v', 'e', 'l', ' ', ':', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'S', 'c', 'o', 'r', 'e', ' ', ':', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'], [' ', ' ', ' ', ' ', '||'], [' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|']]\n        # arr3 = [[' ', ' ', ' ', ' ', '||'], [' ', ' ', ' ', ' ', '||'], [' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'], [' ', ' ', ' ', ' ', '||'], [' ', ' ', ' ', ' ', '||'], [' ', ' ', ' ', ' ', '||'], [' ', ' ', ' ', ' ', '||'], [' ', ' ', ' ', ' ', '||'], [' ', ' ', ' ', ' ', '||'], [' ', ' ', ' ', ' ', '||'], [' ', ' ', ' ', ' ', '||'], [' ', ' ', ' ', ' ', '||'], [' ', ' ', ' ', ' ', '||'], [' ', ' ', ' ', ' ', '|', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '\\\\', '/', '|'], [' ', ' ', ' ', ' ', '||']]\n        # arr1 = np.array(arr1)\n        # arr3 = np.array(arr3)",
        "detail": "background",
        "documentation": {}
    },
    {
        "label": "Ball",
        "kind": 6,
        "importPath": "ball",
        "description": "ball",
        "peekOfCode": "class Ball:\n    def __init__(self,ppadle):\n        self.die = False\n        self.spread = False\n        self.spread_time = False\n        self.shrink = False\n        self.shrink_time = False\n        self.thruball = False\n        self.thruball_time = False\n        self.sticky = False",
        "detail": "ball",
        "documentation": {}
    },
    {
        "label": "check_buddy",
        "kind": 2,
        "importPath": "ball",
        "description": "ball",
        "peekOfCode": "def check_buddy(ok):\n    if(ok>=0 and ok<=5):\n        return True\n    return False\nclass Ball:\n    def __init__(self,ppadle):\n        self.die = False\n        self.spread = False\n        self.spread_time = False\n        self.shrink = False",
        "detail": "ball",
        "documentation": {}
    },
    {
        "label": "MATRIX_WIDTH",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "MATRIX_WIDTH = 85\nMATRIX_LENGTH = 30\nSPEED = 1\n# color escape sequences\ncolors = {\n    'Blue': '\\x1b[0;34m',\n    'Green': '\\x1b[0;32m',\n    'Cyan': '\\x1b[0;36m',\n    'Red': '\\x1b[0;31m',\n    'Purple': '\\x1b[0;35m',",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "MATRIX_LENGTH",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "MATRIX_LENGTH = 30\nSPEED = 1\n# color escape sequences\ncolors = {\n    'Blue': '\\x1b[0;34m',\n    'Green': '\\x1b[0;32m',\n    'Cyan': '\\x1b[0;36m',\n    'Red': '\\x1b[0;31m',\n    'Purple': '\\x1b[0;35m',\n    'Brown': '\\x1b[0;33m',",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "SPEED",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "SPEED = 1\n# color escape sequences\ncolors = {\n    'Blue': '\\x1b[0;34m',\n    'Green': '\\x1b[0;32m',\n    'Cyan': '\\x1b[0;36m',\n    'Red': '\\x1b[0;31m',\n    'Purple': '\\x1b[0;35m',\n    'Brown': '\\x1b[0;33m',\n    'Gray': '\\x1b[0;37m',",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "colors = {\n    'Blue': '\\x1b[0;34m',\n    'Green': '\\x1b[0;32m',\n    'Cyan': '\\x1b[0;36m',\n    'Red': '\\x1b[0;31m',\n    'Purple': '\\x1b[0;35m',\n    'Brown': '\\x1b[0;33m',\n    'Gray': '\\x1b[0;37m',\n    'Light Green': '\\x1b[1;32m',\n    'Light Cyan': '\\x1b[1;36m',",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "bcolors",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "bcolors = {\n    'Blue': '\\x1b[0;44m',\n    'Green': '\\x1b[0;42m',\n    'Cyan': '\\x1b[0;46m',\n    'Red': '\\x1b[0;41m',\n    'Purple': '\\x1b[0;45m',\n    'Brown': '\\x1b[0;43m',\n    'Gray': '\\x1b[0;47m',\n    'Light Green': '\\x1b[1;42m',\n    'Light Cyan': '\\x1b[1;46m',",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "RESET",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "RESET = '\\x1b[0m'",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "landing_page",
        "kind": 5,
        "importPath": "game",
        "description": "game",
        "peekOfCode": "landing_page = landing_page()\ngetinp = Get()\nscene = Scene(SPEED)\npaddle = Paddle()\nclock = Time(0)\nscore = Score(0)\nlevel = Level(1)\nlives = Lives(1) \nball = Ball(paddle)\nPAUSE = Pause(False)",
        "detail": "game",
        "documentation": {}
    },
    {
        "label": "getinp",
        "kind": 5,
        "importPath": "game",
        "description": "game",
        "peekOfCode": "getinp = Get()\nscene = Scene(SPEED)\npaddle = Paddle()\nclock = Time(0)\nscore = Score(0)\nlevel = Level(1)\nlives = Lives(1) \nball = Ball(paddle)\nPAUSE = Pause(False)\nscene.set_init_array(1)",
        "detail": "game",
        "documentation": {}
    },
    {
        "label": "scene",
        "kind": 5,
        "importPath": "game",
        "description": "game",
        "peekOfCode": "scene = Scene(SPEED)\npaddle = Paddle()\nclock = Time(0)\nscore = Score(0)\nlevel = Level(1)\nlives = Lives(1) \nball = Ball(paddle)\nPAUSE = Pause(False)\nscene.set_init_array(1)\nball.start_throw(paddle)",
        "detail": "game",
        "documentation": {}
    },
    {
        "label": "paddle",
        "kind": 5,
        "importPath": "game",
        "description": "game",
        "peekOfCode": "paddle = Paddle()\nclock = Time(0)\nscore = Score(0)\nlevel = Level(1)\nlives = Lives(1) \nball = Ball(paddle)\nPAUSE = Pause(False)\nscene.set_init_array(1)\nball.start_throw(paddle)\nFLAG = Level_change_flag(False)",
        "detail": "game",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "game",
        "description": "game",
        "peekOfCode": "clock = Time(0)\nscore = Score(0)\nlevel = Level(1)\nlives = Lives(1) \nball = Ball(paddle)\nPAUSE = Pause(False)\nscene.set_init_array(1)\nball.start_throw(paddle)\nFLAG = Level_change_flag(False)\nif(0 != landing_page):",
        "detail": "game",
        "documentation": {}
    },
    {
        "label": "score",
        "kind": 5,
        "importPath": "game",
        "description": "game",
        "peekOfCode": "score = Score(0)\nlevel = Level(1)\nlives = Lives(1) \nball = Ball(paddle)\nPAUSE = Pause(False)\nscene.set_init_array(1)\nball.start_throw(paddle)\nFLAG = Level_change_flag(False)\nif(0 != landing_page):\n    while True:",
        "detail": "game",
        "documentation": {}
    },
    {
        "label": "level",
        "kind": 5,
        "importPath": "game",
        "description": "game",
        "peekOfCode": "level = Level(1)\nlives = Lives(1) \nball = Ball(paddle)\nPAUSE = Pause(False)\nscene.set_init_array(1)\nball.start_throw(paddle)\nFLAG = Level_change_flag(False)\nif(0 != landing_page):\n    while True:\n        input = input_to(getinp,scene.speed)",
        "detail": "game",
        "documentation": {}
    },
    {
        "label": "lives",
        "kind": 5,
        "importPath": "game",
        "description": "game",
        "peekOfCode": "lives = Lives(1) \nball = Ball(paddle)\nPAUSE = Pause(False)\nscene.set_init_array(1)\nball.start_throw(paddle)\nFLAG = Level_change_flag(False)\nif(0 != landing_page):\n    while True:\n        input = input_to(getinp,scene.speed)\n        if(input=='q' or input==\"Q\"):",
        "detail": "game",
        "documentation": {}
    },
    {
        "label": "ball",
        "kind": 5,
        "importPath": "game",
        "description": "game",
        "peekOfCode": "ball = Ball(paddle)\nPAUSE = Pause(False)\nscene.set_init_array(1)\nball.start_throw(paddle)\nFLAG = Level_change_flag(False)\nif(0 != landing_page):\n    while True:\n        input = input_to(getinp,scene.speed)\n        if(input=='q' or input==\"Q\"):\n            quitmsg()",
        "detail": "game",
        "documentation": {}
    },
    {
        "label": "PAUSE",
        "kind": 5,
        "importPath": "game",
        "description": "game",
        "peekOfCode": "PAUSE = Pause(False)\nscene.set_init_array(1)\nball.start_throw(paddle)\nFLAG = Level_change_flag(False)\nif(0 != landing_page):\n    while True:\n        input = input_to(getinp,scene.speed)\n        if(input=='q' or input==\"Q\"):\n            quitmsg()\n            break",
        "detail": "game",
        "documentation": {}
    },
    {
        "label": "FLAG",
        "kind": 5,
        "importPath": "game",
        "description": "game",
        "peekOfCode": "FLAG = Level_change_flag(False)\nif(0 != landing_page):\n    while True:\n        input = input_to(getinp,scene.speed)\n        if(input=='q' or input==\"Q\"):\n            quitmsg()\n            break\n        if(input=='p' or input==\"P\" and PAUSE.return_val() == False):\n            PAUSE.toggle_pause()\n            pausedmsg(score.return_val(),clock.return_val())",
        "detail": "game",
        "documentation": {}
    },
    {
        "label": "Get",
        "kind": 6,
        "importPath": "getch",
        "description": "getch",
        "peekOfCode": "class Get:\n    \"\"\"Class to get input from user in real time\"\"\"\n    def __call__(self):\n        \"\"\" Defining the call for class objects \"\"\"\n        fd = sys.stdin.fileno()\n        old_settings = termios.tcgetattr(fd)\n        try:\n            tty.setraw(sys.stdin.fileno())\n            ch = sys.stdin.read(1)\n        finally:",
        "detail": "getch",
        "documentation": {}
    },
    {
        "label": "AlarmException",
        "kind": 6,
        "importPath": "getch",
        "description": "getch",
        "peekOfCode": "class AlarmException(Exception):\n    \"\"\"Handling alarm exception.\"\"\"\n    pass\ndef alarmHandler(signum, frame):\n    \"\"\"Handling timeouts.\"\"\"\n    raise AlarmException\ndef input_to(getch, timeout=1):\n    \"\"\"Taking input from user.\"\"\"\n    signal.signal(signal.SIGALRM, alarmHandler)\n    signal.setitimer(signal.ITIMER_REAL, timeout)",
        "detail": "getch",
        "documentation": {}
    },
    {
        "label": "alarmHandler",
        "kind": 2,
        "importPath": "getch",
        "description": "getch",
        "peekOfCode": "def alarmHandler(signum, frame):\n    \"\"\"Handling timeouts.\"\"\"\n    raise AlarmException\ndef input_to(getch, timeout=1):\n    \"\"\"Taking input from user.\"\"\"\n    signal.signal(signal.SIGALRM, alarmHandler)\n    signal.setitimer(signal.ITIMER_REAL, timeout)\n    try:\n        text = getch()\n        signal.alarm(0)",
        "detail": "getch",
        "documentation": {}
    },
    {
        "label": "input_to",
        "kind": 2,
        "importPath": "getch",
        "description": "getch",
        "peekOfCode": "def input_to(getch, timeout=1):\n    \"\"\"Taking input from user.\"\"\"\n    signal.signal(signal.SIGALRM, alarmHandler)\n    signal.setitimer(signal.ITIMER_REAL, timeout)\n    try:\n        text = getch()\n        signal.alarm(0)\n        return text\n    except AlarmException:\n        signal.signal(signal.SIGALRM, signal.SIG_IGN)",
        "detail": "getch",
        "documentation": {}
    },
    {
        "label": "return_init_array",
        "kind": 2,
        "importPath": "levelsetup",
        "description": "levelsetup",
        "peekOfCode": "def return_init_array(level):\n    level = int(level)\n    return levelarr[level]\ndef return_init_power_array(level):\n    level = int(level)\n    return levelpow[0]\ndef setup(level):\n    arrp = []\n    arp = []\n    striii=\"\"",
        "detail": "levelsetup",
        "documentation": {}
    },
    {
        "label": "return_init_power_array",
        "kind": 2,
        "importPath": "levelsetup",
        "description": "levelsetup",
        "peekOfCode": "def return_init_power_array(level):\n    level = int(level)\n    return levelpow[0]\ndef setup(level):\n    arrp = []\n    arp = []\n    striii=\"\"\n    I=int(len(levelarr[level]))\n    for i in range(0,I):\n        J=int(len(levelarr[level][i]))",
        "detail": "levelsetup",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "levelsetup",
        "description": "levelsetup",
        "peekOfCode": "def setup(level):\n    arrp = []\n    arp = []\n    striii=\"\"\n    I=int(len(levelarr[level]))\n    for i in range(0,I):\n        J=int(len(levelarr[level][i]))\n        striii+=\"    | \"\n        arp = [\" \"]*4 + [\"|\",\" \"]\n        for j in range(0,J):",
        "detail": "levelsetup",
        "documentation": {}
    },
    {
        "label": "levelarr",
        "kind": 5,
        "importPath": "levelsetup",
        "description": "levelsetup",
        "peekOfCode": "levelarr = [\n     [[0,0,0,0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0,0,0,0],\n      [10,10,10,10,10,10,10,10,10,10,10,10,10]],\n     [[0,3,0,3,0,3,0,3,0,3,0,3,0],\n      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\n      [2,1,2,1,2,1,2,1,2,1,2,1,2],",
        "detail": "levelsetup",
        "documentation": {}
    },
    {
        "label": "levelpow",
        "kind": 5,
        "importPath": "levelsetup",
        "description": "levelsetup",
        "peekOfCode": "levelpow = [\n            [[0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [3,0,6,0,2,0,0,0,1,0,5,0,4]],\n           ]\ndef return_init_array(level):\n    level = int(level)",
        "detail": "levelsetup",
        "documentation": {}
    },
    {
        "label": "landing_page",
        "kind": 2,
        "importPath": "messages",
        "description": "messages",
        "peekOfCode": "def landing_page():\n    os.system('clear')\n    print(Fore.RED+Style.BRIGHT+\"\\n\"+\" \"*45+'''\n:::    ::: :::       :::     :::     ::::::::: :::   :::           :::::::::      :::     :::        :::        \n:+:   :+:  :+:       :+:   :+: :+:        :+:  :+:   :+:           :+:    :+:   :+: :+:   :+:        :+:        \n+:+  +:+   +:+       +:+  +:+   +:+      +:+    +:+ +:+            +:+    +:+  +:+   +:+  +:+        +:+        \n+#++:++    +#+  +:+  +#+ +#++:++#++:    +#+      +#++:             +#++:++#+  +#++:++#++: +#+        +#+        \n+#+  +#+   +#+ +#+#+ +#+ +#+     +#+   +#+        +#+              +#+    +#+ +#+     +#+ +#+        +#+        \n#+#   #+#   #+#+# #+#+#  #+#     #+#  #+#         #+#              #+#    #+# #+#     #+# #+#        #+#        \n###    ###   ###   ###   ###     ### #########    ###              #########  ###     ### ########## ########## '''+\" \"*40)",
        "detail": "messages",
        "documentation": {}
    },
    {
        "label": "quitmsg",
        "kind": 2,
        "importPath": "messages",
        "description": "messages",
        "peekOfCode": "def quitmsg():\n    os.system('clear')\n    print(\"\\n\\n\\n\")\n    print(Fore.BLUE + \" \"*20+ '''\n            Y88b   d88P                      .d88888b.           d8b 888    \n             Y88b d88P                      d88P\" \"Y88b          Y8P 888    \n              Y88o88P                       888     888              888    \n               Y888P  .d88b.  888  888      888     888 888  888 888 888888 \n                888  d88\"\"88b 888  888      888     888 888  888 888 888    \n                888  888  888 888  888      888 Y8b 888 888  888 888 888    ",
        "detail": "messages",
        "documentation": {}
    },
    {
        "label": "gameover",
        "kind": 2,
        "importPath": "messages",
        "description": "messages",
        "peekOfCode": "def gameover(SCORE,TIME):\n    os.system('clear')\n    print(\"\\n\\n\\n\")\n    print(Fore.BLUE + \" \"*20+ '''\n             .d8888b.                                        .d88888b.                            \n            d88P  Y88b                                      d88P\" \"Y88b                           \n            888    888                                      888     888                           \n            888         8888b.  88888b.d88b.   .d88b.       888     888 888  888  .d88b.  888d888 \n            888  88888     \"88b 888 \"888 \"88b d8P  Y8b      888     888 888  888 d8P  Y8b 888P\"   \n            888    888 .d888888 888  888  888 88888888      888     888 Y88  88P 88888888 888     ",
        "detail": "messages",
        "documentation": {}
    },
    {
        "label": "pausedmsg",
        "kind": 2,
        "importPath": "messages",
        "description": "messages",
        "peekOfCode": "def pausedmsg(SCORE,TIME):\n    os.system('clear')\n    print(\"\\n\\n\\n\")\n    print(Fore.BLUE + \" \"*20 + '''\n                            8888888b.                                          888      \n                            888   Y88b                                         888      \n                            888    888                                         888      \n                            888   d88P 8888b.  888  888 .d8888b   .d88b.   .d88888      \n                            8888888P\"     \"88b 888  888 88K      d8P  Y8b d88\" 888      \n                            888       .d888888 888  888 \"Y8888b. 88888888 888  888      ",
        "detail": "messages",
        "documentation": {}
    },
    {
        "label": "Paddle",
        "kind": 6,
        "importPath": "paddle",
        "description": "paddle",
        "peekOfCode": "class Paddle:\n    def __init__(self):\n        self.scale = 3\n        self.length = 5*self.scale\n        self.sticky = True\n        self.cordinate = 26\n        self.x = 34\n        self.arr = [\" \"]*4 + [\"|\"] + [\" \"]*61 + [\"|\"]\n        for i in range(34,34+self.length):\n            self.arr[i]=\"_\"",
        "detail": "paddle",
        "documentation": {}
    },
    {
        "label": "Power",
        "kind": 6,
        "importPath": "powerup",
        "description": "powerup",
        "peekOfCode": "class Power:\n    def __init__(self,x,y,num,tinka):\n        self.x = x\n        self.y = y+10\n        self.speedy = 2\n        self.num = num\n        self.start = int(tinka)\n        self.starteff = 0\n        self.active = True\n    def print_data(self):",
        "detail": "powerup",
        "documentation": {}
    },
    {
        "label": "ScoreBoar",
        "kind": 6,
        "importPath": "scoreoard",
        "description": "scoreoard",
        "peekOfCode": "class ScoreBoard : \n    def __init__(self,initialval):\n        self.val = initialval\n    def return_val(self):\n        return self.val\nclass Lives(ScoreBoard):\n    def sub_life(self):\n        self.val = self.val - 1\n        return self.val\n    def add_life(self):",
        "detail": "scoreoard",
        "documentation": {}
    },
    {
        "label": "Lives",
        "kind": 6,
        "importPath": "scoreoard",
        "description": "scoreoard",
        "peekOfCode": "class Lives(ScoreBoard):\n    def sub_life(self):\n        self.val = self.val - 1\n        return self.val\n    def add_life(self):\n        self.val = self.val + 1\n        return self.val\n    def add_in_scene(self,scene):\n        temp = str(self.val)\n        for i in range(0,len(temp)):",
        "detail": "scoreoard",
        "documentation": {}
    },
    {
        "label": "Time",
        "kind": 6,
        "importPath": "scoreoard",
        "description": "scoreoard",
        "peekOfCode": "class Time(ScoreBoard):\n    def update_val(self,delta,scene):\n        self.val = self.val + delta\n    def return_val(self):\n        return math.floor(self.val)\n    def return_value(self):\n        return self.val\n    def add_in_scene(self,scene):\n        temp = str(self.val)\n        for i in range(0,len(temp)):",
        "detail": "scoreoard",
        "documentation": {}
    },
    {
        "label": "Score",
        "kind": 6,
        "importPath": "scoreoard",
        "description": "scoreoard",
        "peekOfCode": "class Score(ScoreBoard):\n    def update_val(self,ss):\n        self.val = self.val + ss*10\n    def add_in_scene(self,scene):\n        temp = str(self.val)\n        for i in range(0,len(temp)):\n            scene.matrix[6][84+i]=temp[i]\nclass Pause(ScoreBoard):\n    def toggle_pause(self):\n        if(self.val == True):",
        "detail": "scoreoard",
        "documentation": {}
    },
    {
        "label": "Pause",
        "kind": 6,
        "importPath": "scoreoard",
        "description": "scoreoard",
        "peekOfCode": "class Pause(ScoreBoard):\n    def toggle_pause(self):\n        if(self.val == True):\n            self.val = False\n        else : \n            self.val = True\nclass Level(ScoreBoard):\n    def update_val(self,scene):\n        self.val = self.val + 1\n    def add_in_scene(self,scene):",
        "detail": "scoreoard",
        "documentation": {}
    },
    {
        "label": "Level",
        "kind": 6,
        "importPath": "scoreoard",
        "description": "scoreoard",
        "peekOfCode": "class Level(ScoreBoard):\n    def update_val(self,scene):\n        self.val = self.val + 1\n    def add_in_scene(self,scene):\n        temp = str(self.val)\n        for i in range(0,len(temp)):\n            scene.matrix[6][55+i]=temp[i]\nclass Level_change_flag(ScoreBoard):\n    def set_val(self,t):\n        self.val = t",
        "detail": "scoreoard",
        "documentation": {}
    },
    {
        "label": "Level_change_flag",
        "kind": 6,
        "importPath": "scoreoard",
        "description": "scoreoard",
        "peekOfCode": "class Level_change_flag(ScoreBoard):\n    def set_val(self,t):\n        self.val = t",
        "detail": "scoreoard",
        "documentation": {}
    }
]